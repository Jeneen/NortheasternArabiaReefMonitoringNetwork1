# read in Bird Data
BirdData <- read.csv( "ABD_all_data/chapter02/chap02e2bDesertBirdAbundance.csv" )
BirdData2 <- table(BirdData)
BirdData2
BirdData2 <- t(table(BirdData))
BirdData2
barplot(BirdData2)
BirdData2
# Generate a frequency table. The sort function is included to sort the categories by their frequencies.
tigerTable <- sort(table(tigerData$activity), decreasing = TRUE)
tigerTable
# You can arrange the frequency table vertically.
data.frame(Frequency = tigerTable)
# read in Bird Data
BirdData <- read.csv( "ABD_all_data/chapter02/chap02e2bDesertBirdAbundance.csv" )
BirdData2 <- table(BirdData)
barplot(BirdData2)
BirdData2
barplot(BirdData$abundance ~ BirdData$species)
# Set the seed for reproducibility
set.seed(123)
# Generate a dataset with highly correlated variables
n <- 100  # Number of data points
mean_x <- 0
mean_y <- 0
sd_x <- 1
sd_y <- 1
correlation <- 0.9  # Adjust this value for the desired correlation
# Generate correlated data
x <- rnorm(n, mean_x, sd_x)
y <- rnorm(n, mean_y, sd_y)
# Create a correlation matrix and adjust it to the desired correlation
cor_matrix <- matrix(c(sd_x^2, correlation * sd_x * sd_y, correlation * sd_x * sd_y, sd_y^2), nrow = 2)
colnames(cor_matrix) <- rownames(cor_matrix) <- c("x", "y")
# Cholesky decomposition to achieve the desired correlation
chol_matrix <- chol(cor_matrix)
correlated_data <- t(chol_matrix) %*% cbind(x, y)
# Set the seed for reproducibility
set.seed(123)
# Generate a dataset with highly correlated variables
n <- 100  # Number of data points
mean_x <- 0
mean_y <- 0
sd_x <- 1
sd_y <- 1
correlation <- 0.9  # Adjust this value for the desired correlation
# Generate correlated data
x <- rnorm(n, mean_x, sd_x)
y <- rnorm(n, mean_y, sd_y)
# Create a correlation matrix and adjust it to the desired correlation
cor_matrix <- matrix(c(sd_x^2, correlation * sd_x * sd_y, correlation * sd_x * sd_y, sd_y^2), nrow = 2)
colnames(cor_matrix) <- rownames(cor_matrix) <- c("x", "y")
# Cholesky decomposition to achieve the desired correlation
chol_matrix <- chol(cor_matrix)
correlated_data <- t(chol_matrix) %*% cbind(x, y)
View(cor_matrix)
# Generate correlated data
x <- rnorm(n, mean_x, sd_x)
y <- rnorm(n, mean_y, sd_y)
cor <- cbind(x, y)
plot(cor)
# Generate a dataset with highly correlated variables
n <- 100  # Number of data points
mean_x <- 0
mean_y <- 0
sd_x <- 0.1
sd_y <- 0.1
# Generate correlated data
x <- rnorm(n, mean_x, sd_x)
y <- rnorm(n, mean_y, sd_y)
cor <- cbind(x, y)
plot(x,y)
# Generate a dataset with highly correlated variables
n <- 100  # Number of data points
mean_x <- 0
mean_y <- 0
sd_x <- 0.01
sd_y <- 0.01
# Generate correlated data
x <- rnorm(n, mean_x, sd_x)
y <- rnorm(n, mean_y, sd_y)
cor <- cbind(x, y)
plot(x,y)
# Install and load the MASS package if not already installed
# install.packages("MASS")
library(MASS)
# Set the seed for reproducibility
set.seed(123)
# Define the correlation matrix
correlation <- 0.9  # Adjust this value for the desired correlation
cor_matrix <- matrix(c(1, correlation, correlation, 1), nrow = 2)
# Generate correlated data
n <- 100  # Number of data points
correlated_data <- mvrnorm(n, mu = c(0, 0), Sigma = cor_matrix)
# Create a data frame
correlated_df <- data.frame(x = correlated_data[, 1], y = correlated_data[, 2])
# Check the correlation
cor(correlated_df$x, correlated_df$y)
plot(correlated_df)
#okay now lets find the mean of the data to get our new origin
meanx <- mean(correlated_df$x
)
#okay now lets find the mean of the data to get our new origin
meanx <- mean(correlated_df$x)
meany <- mean(correlated_df$y)
origin <- c(meanx, meany)
#standardize the data
correlated_df$x <- correlated_df$x - meanx
correlated_df$y <- correlated_df$y - meany
correlated_df$y
correlated_df$x
plot(correlated_df)
# Fit a linear regression model
model <- lm(correlated_df$y ~ correlated_df$x)
# Add the best fit line to the plot
abline(model)
# Create a dummy dataset
set.seed(123)
X <- rnorm(100)
Y <- 2 * X + rnorm(100)
data <- data.frame(X, Y)
# Step 1: Centering and Scaling
mean_X <- mean(data$X)
mean_Y <- mean(data$Y)
sd_X <- sd(data$X)
sd_Y <- sd(data$Y)
plot(data)
# Step 1: Centering and Scaling
mean_X <- mean(data$X)
mean_Y <- mean(data$Y)
sd_X <- sd(data$X)
sd_Y <- sd(data$Y)
centered_scaled_data <- data
centered_scaled_data$X <- (data$X - mean_X) / sd_X
centered_scaled_data$Y <- (data$Y - mean_Y) / sd_Y
# Step 2: Calculating Covariance Matrix
cov_matrix <- cov(centered_scaled_data)
cov_matrix
cov_matrix
# Step 3: Eigendecomposition
eigen_result <- eigen(cov_matrix)
View(eigen_result)
# Calculate the covariance matrix manually
n <- nrow(centered_scaled_data)
# Initialize the covariance matrix
cov_matrix <- matrix(0, nrow = 2, ncol = 2)
# Calculate the covariance elements
for (i in 1:2) {
for (j in 1:2) {
cov_matrix[i, j] <- sum((centered_scaled_data[, i] * centered_scaled_data[, j])) / (n - 1)
}
}
# install.packages("MASS")
library(MASS)
# Set the seed for reproducibility
set.seed(123)
# Define the correlation matrix
correlation <- 0.9  #  lets make a highly correlated dataset to achieve a simple figure
cor_matrix <- matrix(c(1, correlation, correlation, 1), nrow = 2)
# Generate correlated data
n <- 100  # Number of data points
correlated_data <- mvrnorm(n, mu = c(0, 0), Sigma = cor_matrix)
# Create a data frame
correlated_df <- data.frame(x = correlated_data[, 1], y = correlated_data[, 2])
# Check the correlation
cor(correlated_df$x, correlated_df$y)
plot(correlated_df)
#okay now lets find the mean of the data to get our new origin
meanx <- mean(correlated_df$x)
meany <- mean(correlated_df$y)
origin <- c(meanx, meany)
#standardize the data to mean 0 and sd 1
#1. center it
correlated_df$x <- correlated_df$x - meanx
correlated_df$y <- correlated_df$y - meany
#2. scale it
correlated_df$x
#check it
plot(correlated_df)
# Fit a linear regression model
model <- lm(correlated_df$y ~ correlated_df$x)
# Add the best fit line to the plot
abline(model)
#add pc2
# Calculate the slope of the regression line
slope <- coef(model)["correlated_df$x"]
# Calculate the negative reciprocal of the slope
perpendicular_slope <- -1 / slope
# Create a data frame for the perpendicular line
perpendicular_df <- data.frame(x = c(-3, 3))  # Adjust the range as needed
# Calculate the corresponding y values for the perpendicular line
perpendicular_df$y <- perpendicular_slope * perpendicular_df$x
# Plot the original data and the best-fit line
plot(correlated_df, main = "Scatterplot with Best Fit Line and Perpendicular Line")
# Plot the original data and the best-fit line
plot(correlated_df)
abline(model, col = "blue")  # Best fit line
lines(perpendicular_df$x, perpendicular_df$y, col = "red")
# Rotate the plot by switching x and y coordinates
plot(correlated_df$y, correlated_df$x, main = "Rotated Scatterplot with Best Fit Line and Perpendicular Line", xlab = "Y", ylab = "X")
# Add the rotated best fit line (now along the y-axis)
abline(h = 0, col = "blue")  # Horizontal line along the x-axis (origin)
abline(v = 0, col = "red")   # Vertical line along the y-axis (origin)
# install.packages("MASS")
library(MASS)
# Set the seed for reproducibility
set.seed(123)
# Define the correlation matrix
correlation <- 0.9  #  lets make a highly correlated dataset to achieve a simple figure
cor_matrix <- matrix(c(1, correlation, correlation, 1), nrow = 2)
# Generate correlated data
n <- 100  # Number of data points
correlated_data <- mvrnorm(n, mu = c(0, 0), Sigma = cor_matrix)
# Create a data frame
correlated_df <- data.frame(x = correlated_data[, 1], y = correlated_data[, 2])
# Check the correlation
cor(correlated_df$x, correlated_df$y)
plot(correlated_df)
#okay now lets find the mean of the data to get our new origin
meanx <- mean(correlated_df$x)
meany <- mean(correlated_df$y)
origin <- c(meanx, meany)
#standardize the data to mean 0 and sd 1
#1. center it
correlated_df$x <- correlated_df$x - meanx
correlated_df$y <- correlated_df$y - meany
#2. scale it
correlated_df$x
#check it
plot(correlated_df)
# Fit a linear regression model
model <- lm(correlated_df$y ~ correlated_df$x)
# Add the best fit line to the plot (e.g. pc1)
abline(model)
#add pc2
# Calculate the slope of the regression line
slope <- coef(model)["correlated_df$x"]
# Calculate the negative reciprocal of the slope
perpendicular_slope <- -1 / slope
# Create a data frame for the perpendicular line
perpendicular_df <- data.frame(x = c(-3, 3))  # Adjust the range as needed
# Calculate the corresponding y values for the perpendicular line
perpendicular_df$y <- perpendicular_slope * perpendicular_df$x
# Plot the original data and the best-fit line
plot(correlated_df)
abline(model, col = "blue")  # Best fit line
lines(perpendicular_df$x, perpendicular_df$y, col = "red")
#rotate the first axis
# Fit a linear regression model
model <- lm(correlated_df$y ~ correlated_df$x)
# Get the slope (coefficient) of the best-fit line
slope <- coef(model)["correlated_df$x"]
# Subtract the slope from the line value
line_value <- 0  # The y-intercept of the rotated x-axis
line_value_subtracted <- line_value - slope
cat("Slope of the best-fit line:", slope, "\n")
cat("Line value subtracted by the slope:", line_value_subtracted, "\n")
# Subtract the slope from the line value
line_value <- model$fitted.values
line_value_subtracted <- line_value - slope
plot(line_value_subtracted)
plot(line_value_subtracted, correlated_df$x)
plot(line_value_subtracted, correlated_df$y)
# Subtract the slope from the line value
line_value <- model$fitted.values
plot(line_value, model$model$`correlated_df$y`)
plot(line_value, model$model$`correlated_df$x`)
plot(line_value_subtracted, correlated_df$y)
plot(correlated_df)
abline(model, col = "blue")  # Best fit line
lines(perpendicular_df$x, perpendicular_df$y, col = "red")
line_value_subtracted <- line_value - correlated_df$y
plot(line_value_subtracted)
plot(line_value_subtracted, correlated_df$y)
plot(correlated_df)
correlated_df$y <- correlated_df$y- correlated_df$y
plot(correlated_df)
# install.packages("MASS")
library(MASS)
# Set the seed for reproducibility
set.seed(123)
# Define the correlation matrix
correlation <- 0.9  #  lets make a highly correlated dataset to achieve a simple figure
cor_matrix <- matrix(c(1, correlation, correlation, 1), nrow = 2)
# Generate correlated data
n <- 100  # Number of data points
correlated_data <- mvrnorm(n, mu = c(0, 0), Sigma = cor_matrix)
# Create a data frame
correlated_df <- data.frame(x = correlated_data[, 1], y = correlated_data[, 2])
# Check the correlation
cor(correlated_df$x, correlated_df$y)
plot(correlated_df)
#okay now lets find the mean of the data to get our new origin
meanx <- mean(correlated_df$x)
meany <- mean(correlated_df$y)
origin <- c(meanx, meany)
#standardize the data to mean 0 and sd 1
#1. center it
correlated_df$x <- correlated_df$x - meanx
correlated_df$y <- correlated_df$y - meany
#2. scale it
correlated_df$x
#check it
plot(correlated_df)
# Fit a linear regression model
model <- lm(correlated_df$y ~ correlated_df$x)
# Add the best fit line to the plot (e.g. pc1)
abline(model)
#add pc2
# Calculate the slope of the regression line
slope <- coef(model)["correlated_df$x"]
# Calculate the negative reciprocal of the slope
perpendicular_slope <- -1 / slope
# Create a data frame for the perpendicular line
perpendicular_df <- data.frame(x = c(-3, 3))  # Adjust the range as needed
# Calculate the corresponding y values for the perpendicular line
perpendicular_df$y <- perpendicular_slope * perpendicular_df$x
# Plot the original data and the best-fit line
plot(correlated_df)
abline(model, col = "blue")  # Best fit line
lines(perpendicular_df$x, perpendicular_df$y, col = "red")
#rotate the first axis
# Get the slope (coefficient) of the best-fit line
slope <- coef(model)["correlated_df$x"]
# Subtract the slope from the line value
line_value <- model$fitted.values
correlated_df$y <- correlated_df$y- correlated_df$y
plot(correlated_df)
# set the path to the directory
my_path <- setwd("/Users/jh8695/Documents/GitRepos/ReefCloud/Processed")
# list all the files in the directory
image_files <- list.files(my_path, pattern = ".jpg|.jpeg|.png|.gif", recursive = TRUE, full.names = TRUE)
# create a data frame with file paths
my_df <- data.frame(file_path = image_files)
#remove the file path before processed
my_df$file_path <- sub("^(?:[^/]*/){7}", "/", my_df$file_path)
#remove image name
my_df$file_path <-  sub("/[^/]*$", "/", my_df$file_path)
my_df <- my_df %>% distinct()
library(dplyr)
# set the path to the directory
my_path <- setwd("/Users/jh8695/Documents/GitRepos/ReefCloud/Processed")
# list all the files in the directory
image_files <- list.files(my_path, pattern = ".jpg|.jpeg|.png|.gif", recursive = TRUE, full.names = TRUE)
# create a data frame with file paths
my_df <- data.frame(file_path = image_files)
#remove the file path before processed
my_df$file_path <- sub("^(?:[^/]*/){7}", "/", my_df$file_path)
#remove image name
my_df$file_path <-  sub("/[^/]*$", "/", my_df$file_path)
my_df <- my_df %>% distinct()
View(my_df)
file_path <- "/Users/jh8695/Documents/GitRepos/NortheasternArabiaReefMonitoringNetwork1/Data/Photoquadrats/Test" #Add file path here
site <- "TEST" #Add site name here
date <- "2023-09-18" #Add date here
create_folders <- function(file_path, site, date) {
# Create "Processed" folder
processed_path <- file.path(file_path, "Processed")
if(!dir.exists(processed_path)) {
dir.create(processed_path)
}
# Create folder named after the "site" input
site_path <- file.path(processed_path, site)
if(!dir.exists(site_path)) {
dir.create(site_path)
}
# Create folder named after the "date" input
date_path <- file.path(site_path, date)
if(!dir.exists(date_path)) {
dir.create(date_path)
}
# Create sub-folders A, B, C, D, E, F
sub_folders <- c("A", "B", "C", "D", "E", "F")
for(folder in sub_folders) {
sub_folder_path <- file.path(date_path, folder)
if(!dir.exists(sub_folder_path)) {
dir.create(sub_folder_path)
}
}
}
# Example usage:
# file_path <- "/Photoquadrats"
# site <- "TEST"
# date <- "2023-09-18"
create_folders(file_path, site, date)
extract_filepaths <- function(dir_path) {
# Set the path to the directory
my_path <- setwd(dir_path)
# List all the image files in the directory
image_files <- list.files(my_path, pattern = ".jpg|.jpeg|.png|.gif", recursive = TRUE, full.names = TRUE)
# Create a data frame with file paths
my_df <- data.frame(file_path = image_files)
# Remove the file path before 'Processed'
my_df$file_path <- sub("^(?:[^/]*/){7}", "/", my_df$file_path)
# Remove image name
my_df$file_path <- sub("/[^/]*$", "/", my_df$file_path)
# Deduplicate
my_df <- my_df %>% distinct()
# Write to CSV
write.csv(my_df, "surveys_filepaths.csv") # change name here
}
# Example usage:
extract_filepaths("/Users/jh8695/Documents/GitRepos/NortheasternArabiaReefMonitoringNetwork1/Data/Photoquadrats/Test/Processed/2022-11-11")
extract_image_titles <- function(dir_path) {
# Set the path to the directory
my_path <- setwd(dir_path)
# List all the image files in the directory
image_files <- list.files(my_path, pattern = ".jpg|.jpeg|.png|.gif", recursive = TRUE, full.names = TRUE)
# Create a data frame with file paths
my_df <- data.frame(file_path = image_files)
# Remove the file path before the image to get the image name
my_df$file_path <- sub(".*/", "/", my_df$file_path)
my_df$file_path <- gsub("/", "", my_df$file_path)
# Write to CSV
write.csv(my_df, "images_titles.csv")
}
# Example usage:
extract_image_titles("/Users/jh8695/Documents/GitRepos/NortheasternArabiaReefMonitoringNetwork1/Data/Photoquadrats/Test/Processed/2022-11-11")
library(tools)
move_named_images <- function() {
# set the directory to "Documents/Images"
setwd("/Users/jh8695/Documents/GitRepos/NortheasternArabiaReefMonitoringNetwork1/Data/Photoquadrats/Test")
# get a list of all the image files
images <- list.files(recursive = TRUE, pattern = "\\.jpg$", full.names = TRUE)
# loop through each image file
for (img in images) {
# get the subfolder name based on the first "_" in the image name
subfolder <- strsplit(basename(img), "_")[[1]][2]
# create the subfolders if they don't already exist
dir.create(file.path(dirname(img), subfolder), showWarnings = FALSE, recursive = TRUE)
# move the image to the appropriate subfolder
file.rename(img, file.path(dirname(img), subfolder, basename(img)))
}
}
move_images()
move_named_images()
move_named_images <- function() {
# set the directory to "Documents/Images"
setwd("/Users/jh8695/Documents/GitRepos/NortheasternArabiaReefMonitoringNetwork1/Data/Photoquadrats/Test")
# get a list of all the image files
images <- list.files(recursive = TRUE, pattern = "\\.jpg$", full.names = TRUE)
# loop through each image file
for (img in images) {
# get the subfolder name based on the first "_" in the image name
subfolder <- strsplit(basename(img), "_")[[1]][2]
# create the subfolders if they don't already exist
dir.create(file.path(dirname(img), subfolder), showWarnings = FALSE, recursive = TRUE)
# move the image to the appropriate subfolder
file.rename(img, file.path(dirname(img), subfolder, basename(img)))
}
}
move_named_images()
read.csv("check.csv")
# read the data in
NumberGenesRegulated <- read.csv("ABD_all_data/chapter04/chap04q09NumberGenesRegulated.csv")
# plot the data and calculate the summary statistics
attach(NumberGenesRegulated)
numbers.regulated = rep(ngenes, frequency)
# plot the data and calculate the summary statistics
numbers.regulated = rep(NumberGenesRegulated$ngenes, frequency)
View(NumberGenesRegulated)
# plot the data and calculate the summary statistics
hist(NumberGenesRegulated$ngenes, nclass=37, xlab="Number of genes
regulated", ylab="Frequency")
# plot the data and calculate the summary statistics
numbers.regulated <- NumberGenesRegulated$ngenes
hist(numbers.regulated, nclass=37, xlab="Number of genes
regulated", ylab="Frequency")
mean(numbers.regulated)
se = sd(numbers.regulated) / sqrt(length(numbers.regulated))
se
# Read the human gene length data, which we will use as our known population of measurements.
humanGeneLengths <- read.csv("ABD_all_data/chapter04/chap04e1HumanGeneLengths.csv")
head(humanGeneLengths)
# we are subsetting from the data frame humanGeneLengths
# we want to keep only the rows where the column geneLength has a value less than or equal to 15000
geneLengthsUpTo15K <- subset(humanGeneLengths, geneLength <= 15000)
hist(geneLengthsUpTo15K$geneLength, right = FALSE) # right = false means right-open (ie. [10, 12) will "hold" values between 10 and 12, including 10 but not including 12)
# A fancier histogram that makes use of additional options can be produced
# with the commands here.
hist(geneLengthsUpTo15K$geneLength, breaks = seq(0,15000,500),
xlab = "Gene length (Number of nucleotides)",
ylab = "Frequency",
col = "firebrick", las = 1, main = "", right = FALSE,
ylim = c(0, 3000))
# calculate the mean
meanGeneLength <- mean(humanGeneLengths$geneLength)
meanGeneLength
#There are two ways to calculate the sample size.  How are these different?
N <- nrow(humanGeneLengths)
N
samplesize=length(humanGeneLengths$geneLength)
samplesize
samplesize=length(humanGeneLengths$geneLength)
samplesize
results100 <- vector()
for(i in 1:10000){
temporarySample <- sample(humanGeneLengths$geneLength, size = 100,
replace = FALSE)
results100[i] <- mean(temporarySample)
}
# R code here
age <- read.csv("AgeSteroid.csv")
# R code here
age <- read.csv("AgeSteriod.csv")
# A fancier histogram that makes use of additional options can be produced
# with the commands here.
hist(geneLengthsUpTo15K$geneLength, breaks = seq(0,15000,500),
xlab = "Gene length (Number of nucleotides)",
ylab = "Frequency",
col = "firebrick", las = 1, main = "", right = FALSE,
ylim = c(0, 3000))
